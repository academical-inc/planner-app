#!/usr/bin/env coffee

# Usage:
# Will generate spec file for given module
#
# spec <modulePath>
#
# modulePath: path for module relative to app/scripts.
#
# Example:
#   spec components/MyReactComponent
#   => Creates test/spec/components/MyReactComponent.spec.coffee

mustache  = require 'mustache'
humps     = require 'humps'
parseArgs = require 'minimist'
fs        = require 'fs'


specTemplate = """

H{{{padding}}}= require '{{{steps}}}/SpecHelper'
{{{moduleName}}} = require '{{{steps}}}/../app/scripts/{{{modulePath}}}'
{{#isStore}}
{ActionTypes} = require '../../../app/scripts/constants/PlannerConstants'
{{/isStore}}


describe '{{{moduleName}}}', ->

{{#isComponent}}
  describe '#render', ->


{{/isComponent}}
{{#isStore}}
  beforeEach ->
    @payloads = {}  # Add the action types
    @dispatch = {{{moduleName}}}.dispatchCallback
    H.spyOn {{{moduleName}}}, "emitChange"
    H.rewire ScheduleStore, {}  # Rewire any private state

  afterEach ->
    @restore() if @restore?


  describe 'init', ->

    it 'initializes store correctly', ->
      expect({{{moduleName}}}.dispatchToken).toBeDefined()


  describe 'when SOME_ACTION received', ->


{{/isStore}}

"""

storeTemplate = """

Store         = require './Store'
{ActionTypes} = require '../constants/PlannerConstants'


# Private


class {{{moduleName}}} extends Store


  disptachCallback: (payload)=>
    action = payload.action

    switch action.type
      when ActionTypes.SOME_ACTION
        # Do something
        @emitChange()


module.exports = new {{{moduleName}}}
"""

componentTemplate = """

React = require 'react'
R     = React.DOM


{{{moduleName}}} = React.createClass(

  render: ->
    R.div className: 'pla-{{{dashModuleName}}}',
      "Some Content"

)

module.exports = {{{moduleName}}}
"""


getModulePath = (rawModulePath)->
  modulePath = rawModulePath.replace ".coffee", ""
  modulePath = modulePath.replace /\/$/, ""
  modulePath = modulePath.replace /^\//, ""
  modulePath


genFile = (dir, rawModuleName)->
  moduleName = getModulePath rawModuleName
  modulePath = "#{dir}/#{moduleName}"
  moduleDir  = "#{__dirname}/../app/scripts/#{dir}"

  if not fs.existsSync(moduleDir)
    console.log "Creating dir 'app/scripts/#{dir}'"
    fs.mkdirSync moduleDir

  data =
    moduleName:      moduleName
    dashModuleName:  humps.decamelize moduleName, "-"

  filePath = "#{__dirname}/../app/scripts/#{modulePath}.coffee"
  template = if dir is "stores" then storeTemplate else componentTemplate
  content  = mustache.render template, data

  console.log "Creating file for: #{modulePath}"
  if fs.existsSync filePath
    console.log "A file already exists at app/scripts/#{modulePath}.coffee"
    console.log "Remove it to generate a new one"
    process.exit()

  fs.writeFile filePath, content, (err)->
    if err
      console.log err
    else
      console.log "The file was saved at
                  app/scripts/#{modulePath}.coffee!"


genSpec = (rawModulePath)->
  modulePath = getModulePath rawModulePath
  pathParts  = modulePath.split "/"
  moduleName = pathParts[pathParts.length-1]

  relativeDirPath = pathParts[...-1].join "/"
  moduleDir       = "#{__dirname}/../app/scripts/#{relativeDirPath}"
  testModuleDir   = "#{__dirname}/../test/spec/#{relativeDirPath}"

  if not fs.existsSync(moduleDir)
    console.log "Module directory 'app/scripts/#{relativeDirPath}' does not
                exist"
    process.exit()

  if not fs.existsSync(testModuleDir)
    console.log "Creating dir 'test/spec/#{relativeDirPath}'"
    fs.mkdirSync testModuleDir

  steps = (".." for [1..pathParts.length]).join "/"

  data =
    modulePath:   modulePath
    moduleName:   moduleName
    isComponent:  pathParts[0] == "components"
    isStore:      pathParts[0] == "stores"
    padding:      Array(moduleName.length+1).join " "
    steps:        steps

  specPath = "#{__dirname}/../test/spec/#{modulePath}.spec.coffee"
  content  = mustache.render specTemplate, data

  console.log "Creating spec file for: #{modulePath}"
  if fs.existsSync specPath
    console.log "A spec already exists at test/spec/#{modulePath}.spec.coffee"
    console.log "Remove it to generate a new one"
    process.exit()

  fs.writeFile specPath, content, (err)->
    if err
      console.log err
    else
      console.log "The spec file was saved at
                  test/spec/#{modulePath}.spec.coffee!"


main = ->
  args    = parseArgs process.argv[2..]
  command = args._[0]

  switch command
    when "spec" then genSpec args._[1]
    when "store" then genFile "stores", args._[1]
    when "stores" then genFile "stores", args._[1]
    when "component" then genFile "components", args._[1]
    when "components" then genFile "components", args._[1]
    else
      console.log "Unrecognized Command"

main()
